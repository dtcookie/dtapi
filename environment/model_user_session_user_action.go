/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace REST API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/section-api) to read about use-cases and examples.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package environment


// A user action encompasses a single click or other action performed by the user as part of a user session
type UserSessionUserAction struct {
	// This is usually the page that was loaded as part of that action or a textual description of the action, e.g. a keyboard click
	Name string `json:"name,omitempty"`
	// The DNS domain that was recorded as part of the user action
	Domain string `json:"domain,omitempty"`
	// The target URL the user action was pointing to
	TargetUrl string `json:"targetUrl,omitempty"`
	// What type of user action was recorded
	Type string `json:"type,omitempty"`
	// The point in time when the user action was recorded, in milliseconds since the epoch
	StartTime int64 `json:"startTime,omitempty"`
	// The point in time when user action for this user session was ending, in milliseconds since the epoch
	EndTime int64 `json:"endTime,omitempty"`
	// The duration from when the user action started to when the user action ended, in milliseconds
	Duration int64 `json:"duration,omitempty"`
	// The name of the application, based on the configured detection rules
	Application string `json:"application,omitempty"`
	// The internal id of the application, this is useful when calling various REST APIs, e.g. as key for timeseries queries
	InternalApplicationId string `json:"internalApplicationId,omitempty"`
	// The average time at which visible parts of the page are displayed, in milliseconds
	SpeedIndex int32 `json:"speedIndex,omitempty"`
	// The number of errors detected as part of this user action
	ErrorCount int32 `json:"errorCount,omitempty"`
	// How the performance of this user action was categorized
	ApdexCategory string `json:"apdexCategory,omitempty"`
	// Lists user action based conversion goals that were matched for this user session. Note: It is also possible to record conversion goals on the user session
	MatchingConversionGoals []string `json:"matchingConversionGoals,omitempty"`
	// How much time was spent for this user action on the network, in milliseconds
	NetworkTime int32 `json:"networkTime,omitempty"`
	// How much time was spent for this user action for server-side processing, in milliseconds
	ServerTime int32 `json:"serverTime,omitempty"`
	// How much time was spent for this user action for frontend rendering, in milliseconds
	FrontendTime int32 `json:"frontendTime,omitempty"`
	// How much time was spent for this user action until document was interactive, in milliseconds
	DocumentInteractiveTime int32 `json:"documentInteractiveTime,omitempty"`
	// The number of images that could not be loaded
	FailedImages int32 `json:"failedImages,omitempty"`
	// The number of AJAX requests that failed
	FailedXhrRequests int32 `json:"failedXhrRequests,omitempty"`
	// The number of HTTP requests where the response code indicates a failed state
	HttpRequestsWithErrors int32 `json:"httpRequestsWithErrors,omitempty"`
	// The number of third party resources loaded as part of this user action
	ThirdPartyResources int32 `json:"thirdPartyResources,omitempty"`
	// How much time was spent for this user action while waiting for third party resources, in milliseconds
	ThirdPartyBusyTime int32 `json:"thirdPartyBusyTime,omitempty"`
	// The number of resources fetched from a CDN
	CdnResources int32 `json:"cdnResources,omitempty"`
	// How much time was spent for this user action while waiting for CDN resources, in milliseconds
	CdnBusyTime int32 `json:"cdnBusyTime,omitempty"`
	// The number of resources fetched from the originating server
	FirstPartyResources int32 `json:"firstPartyResources,omitempty"`
	// How much time was spent for this user action while waiting for resources from the originating server, in milliseconds
	FirstPartyBusyTime int32 `json:"firstPartyBusyTime,omitempty"`
	// Describes if this user session includes a crash
	HasCrash bool `json:"hasCrash,omitempty"`
	// How much time was spent until the DOM tree was complete, in milliseconds
	DomCompleteTime int32 `json:"domCompleteTime,omitempty"`
	// How much time was spent until the DOM tree was loaded, in milliseconds
	DomContentLoadedTime int32 `json:"domContentLoadedTime,omitempty"`
	// How much time was spent until the load event started, in milliseconds
	LoadEventStart int32 `json:"loadEventStart,omitempty"`
	// How much time was spent until the load event was finished, in milliseconds
	LoadEventEnd int32 `json:"loadEventEnd,omitempty"`
	// How much time was spent until the navigation started, in milliseconds
	NavigationStart int64 `json:"navigationStart,omitempty"`
	// How much time was spent until the request started, in milliseconds
	RequestStart int32 `json:"requestStart,omitempty"`
	// How much time was spent until the response started, in milliseconds
	ResponseStart int32 `json:"responseStart,omitempty"`
	// How much time was spent until the response ended, in milliseconds
	ResponseEnd int32 `json:"responseEnd,omitempty"`
	// How much time was spent until the page was visually complete, in milliseconds
	VisuallyCompleteTime int32 `json:"visuallyCompleteTime,omitempty"`
}
